Context-Free Grammar that dictates order of syntax in Regal

    - At least one whitespace character must separate certain tokens.
        - Tokens that use special symbols (e.g. '+' or '**' or '=') do not need
          whitespace separating them from other tokens.
    - Groups of non-terminals are labeled in all caps and indented under their labels.
    - Non-terminals follow the CamelCase writing style.
    - Terminals are surrounded in single-quotes. (e.g. 'example')
    - Undefined terminals are surrounded in single-quote carrots. (e.g. '<example>')
    - The '|' symbol represents an OR branch.



SCOPE ANALYSIS:

    File -> '\n' CodeScope

    CodeScope -> InlineOperation BlockIndicator
            | IfBlock BlockIndicator

    BlockIndicator -> '\n<matched indent>' CodeScope | '\n<unmatched indent>'
        <matched indent> is as indented or more indented than the current scope
        <unmatched indent> is less indented than the curent scope, indicating the end of a scope


MULTI-LINE OPERATIONS:

    IfBlock -> 'if' Expression '\n<new indent>' CodeScope ElseBlock
            | 'if' Expression '\n<new indent>' CodeScope
        <new_indent> is a greater indend than the current scope, indicating a nested scope

    ElseBlock -> '\n<exact indent>' 'else' IfBlock
            | '\n<exact indent>' 'else' '\n<new indent>' CodeScope
        <exact indent> is precisely the same indentation as the current scope
        <new_indent> is a greater indend than the current scope, indicating a nested scope


SINGLE-LINE INITIALIZER:

    InlineOperation -> Assignment


VARIABLE ASSIGNMENT:

    Assignment -> ExplicitAssignment | ImplicitAssignment

    ExplicitAssignment -> LetStatement | NowStatement

            LetStatement -> 'let' '<var>' '=' Expression
                <var> is a custom variable name

            NowStatement -> 'now' '<var>' '=' Expression
                <var> is an already defined variable name

    ImplicitAssignment -> '<var>' '=' Expression
            <var> is an already defined variable name


EXPRESSIONS:

    Expression -> InlineIfExpression

    InlineIfExpression -> ComparisonExpr 'if' ComparisonExpr 'else' Expression | ComparisonExpr


BOOLEAN ARITHMETIC:

    ComparisonExpr -> OrExpr '<comp_op>' ComparisonExpr | OrExpr
        <comp_op> is '==' or 'is'

    OrExpr -> ExclusiveOrExpr '<or_op>' OrExpr | ExclusiveOrExpr
        <or_op> is '|' or 'or'

    ExclusiveOrExpr -> AndExpr '<xor_op>' ExclusiveOrExpr | AndExpr
        <xor_op> is '||' or 'xor'

    AndExpr -> NotExpr '<and_op>' AndExpr | NotExpr
        <and_op> is '&' or 'and'

    NotExpr -> '<not_op>' NotExpr | NumericalCompExpr
        <not_op> is '!' or 'not'
    
    NumericalCompExpr -> AdditiveExpr '<numeric_comp_op>' NumericalCompExpr | AdditiveExpr
        <numeric_comp_op> is '>', '<', '<=', or '>='


NUMERICAL ARITHMETIC:

    AdditiveExpr -> MultiplicativeExpr '<add_op>' AdditiveExpr | MultiplicativeExpr
        <add_op> is '+' or '-'

    MultiplicativeExpr -> ExponentialExpr '<mult_op>' MultiplicativeExpr | ExponentialExpr
        <mult_op> is '*' or '/'

    ExponentialExpr -> MinusIdentifierExpr '**' ExponentialExpr | MinusIdentifierExpr


LOW-LEVEL VALUES:

    MinusIdentifierExpr -> PrimitiveExpr | '-'PrimitiveExpr

    PrimitiveExpr -> '<var>' | NumberExpr | BooleanExpr | '('Expression')'
        <var> is a custom variable name

        NumberExpr -> '<integer>'
            <integer> is any integer

        BooleanExpr -> 'true' | 'false'
