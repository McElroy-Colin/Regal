Context-Free Grammar that dictates order of syntax in Regal

    - At least one whitespace character must separate certain tokens.
        - Tokens that use special symbols (e.g. '+' or '**' or '=') do not need
          whitespace separating them from other tokens.
    - Groups of non-terminals are labeled in all caps and indented under their labels.
    - Non-terminals follow the CamelCase writing style.
    - Terminals are surrounded in single-quotes. (e.g. 'example')
    - Undefined terminals are surrounded in single-quote carrots. (e.g. '<example>')
    - The '|' symbol represents an OR branch.


File -> '\n' '<whitespace>' CodeBlock | '<whitespace>' CodeBlock
    <whitespace> is any number of whitespace characters

CodeBlock -> SingleOperation '\n' '<whitespace>' CodeBlock | SingleOperation '\n' '<whitespace>'
    <whitespace> is any number of whitespace characters

SingleOperation -> Assignment

Assignment -> ExplicitAssignment | ImplicitAssignment

ExplicitAssignment -> LetStatement | NowStatement

        LetStatement -> 'let' '<var>' '=' InlineIfStatement
            <var> is a custom variable name

        NowStatement -> 'now' '<var>' '=' InlineIfStatement
            <var> is a custom variable name

ImplicitAssignment -> '<var>' '=' InlineIfStatement
        <var> is an already defined variable name

InlineIfStatement -> Expression 'if' OrExpr 'else' InlineIfStatement | Expression

Expression -> OrExpr 

BOOLEAN ARITHMETIC:

    OrExpr -> ExclusiveOrExpr '<or_op>' OrExpr | ExclusiveOrExpr
        <or_op> is '|' or 'or'

    ExclusiveOrExpr -> AndExpr '<xor_op>' ExclusiveOrExpr | AndExpr
        <xor_op> is '||' or 'xor'

    AndExpr -> NotExpr '<and_op>' AndExpr | NotExpr
        <and_op> is '&' or 'and'

    NotExpr -> '<not_op>' ComparisonExpr | ComparisonExpr
        <not_op> is '!' or 'not'
    
    ComparisonExpr -> AdditiveExpr '<comp_op>' ComparisonExpr | AdditiveExpr
        <comp_op> is '>', '<', '=', or 'is'


NUMERICAL ARITHMETIC:

    AdditiveExpr -> MultiplicativeExpr '<add_op>' AdditiveExpr | MultiplicativeExpr
        <add_op> is '+' or '-'

    MultiplicativeExpr -> ExponentialExpr '<mult_op>' MultiplicativeExpr | ExponentialExpr
        <mult_op> is '*' or '/'

    ExponentialExpr -> MinusIdentifierExpr '**' ExponentialExpr | MinusIdentifierExpr


LOW-LEVEL VALUES:

    MinusIdentifierExpr -> PrimitiveExpr | '-'PrimitiveExpr

        PrimitiveExpr -> '<var>' | NumberExpr | BooleanExpr | '('InlineIfStatement')'
            <var> is a custom variable name

            NumberExpr -> '<integer>'
                <integer> is any integer

            BooleanExpr -> 'true' | 'false'
