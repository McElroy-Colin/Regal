In Regal, operations are typechecked before runtime. 

However, number types are unique in that they implicitly combine without throwing a type error.

    e.g. 12 + 3.8 = 15.8 implicitly combines a 32-bit int with a 32-bit float and results in a 32-bit float.

Thus, number type combinations have the following precedence:

    A <> B -> Result means A type combines with B type and has result type
        64-bit float <> ANY -> 64-bit float

        64-bit int <> 64-bit int -> 64-bit int
        64-bit int <> 32-bit float -> 64-bit float
        64-bit int <> 32-bit int -> 64-bit int

        32-bit float <> 32-bit float -> 64-bit float
        32-bit float <> 32-bit int -> 64-bit float

        32-bit int <> 32-bit int -> 64-bit int

In a combination that happens before runtime (a constant combination), the result is then WRAPPED. 
This means the result of the combination is placed in the smallest type that can hold it.

For combinations that happen at runtime, no wrapping occurs, leading to faster execution but suboptimal memory use.